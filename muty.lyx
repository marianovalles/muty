#LyX 1.6.5 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\begin_preamble
% Very simple template for lab reports. Most common packages are already included.
% Change according your file encoding


%opening
\title{SeminarReport:seminarID(e.g.Chatty)}\author{Yourname}\date{\today{}}
\end_preamble
\use_default_options false
\language english
\inputencoding utf8
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Seminar report : Groupy
\end_layout

\begin_layout Author
Mariano VallÃ©s
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
In this seminar we implemented a group membership service and experienced
 some of the problems that are important when messages are multicasted between
 them.
 
\end_layout

\begin_layout Standard
The system consists initially of one node , considered the leader, and then
 any new node willing to enter the group as a slave sends a message to any
 node, in case a slave node is contacted this 
\emph on
join
\emph default
 message is forwarded to the leader for him to update a Peers list.
 Moreover, the leader is also in charge of multicasting any messages sent
 from a slave's application layer to the group.
 Thus, all messages have to first be received by the leader before being
 sent to the rest of the slaves
\end_layout

\begin_layout Standard
A diagram with a simple view of the system is shown in Figure REF
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/zucaritas/EMDC/SODX/Practice/groupy/report/Diagram1.eps
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
A simple diagram of the implementation
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
On the first implementation failures are not considered, on the second one
 , failures are considered implemented, but nodes get out of synchronism
 and in the last implementation this issue is solved by implementing a reliable
 multicast.
\end_layout

\begin_layout Section
Main issues and solutions
\end_layout

\begin_layout Standard
As mentioned before, the first implementation, had the problem of being
 a really simple implementation of a lock, but it did not provide a method
 to decide which of two locks would get access to the critical zone, therefore
 resulting in a deadlock situation.
 As this was expected, after a deadlock, there was a 
\emph on
timeout 
\emph default
value in each worker to know when to give up.
\end_layout

\begin_layout Standard
Although lock1 worked correctly for a while, when we increased the risk
 of conflict the deadlock situations also increased with lots of workers
 giving up and lot of time wasted.
\end_layout

\begin_layout Standard
In the second lock (lock2), we introduced the concept of priority of processes,
 we assigned an id to each lock, and then when two locks wanted to enter
 the critical zone, an 
\emph on
ok
\emph default
 message was sent to the one with higher priority and the other one was
 sent to 
\emph on
wait 
\emph default
state again.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename graficos/Diapositiva1.PNG

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Lock2.Two-processes-critical"

\end_inset

Lock2.Two processes entering the critical zone
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Lock2.Two-processes-critical"

\end_inset

 shows the interaction of 4 processes using the proposed solution of priority
 assignment.
 The problem that arises in this scenario is that 
\series bold
P2
\series default
 after sending 
\emph on
ok
\emph default
 thus granting access to the critical zone to 
\series bold
P0
\series default
 with higher priority, could also enter the critical zone, after receiving
 a delayed 
\emph on
ok
\emph default
 message from 
\series bold
P1
\series default
.
 
\end_layout

\begin_layout Standard
To solve this situation, an additional request message is sent from 
\series bold
P2
\series default
 only to 
\series bold
P0
\series default
,to guarantee that the happened before order is preserved.
 This is observed in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Lock2.-Only-1-critical"

\end_inset

.
\end_layout

\begin_layout Standard
However, this implementation is quite unfair, since it allows processes
 with a higher priority to enter the critical zone many more times than
 those with lower priority.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename graficos/Diapositiva2.PNG

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Lock2.-Only-1-critical"

\end_inset

Lock2.
 Only one P entering the critical zone.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The third implementation of the lock (lock3) adds to the previous one, the
 use of Lamport Clocks to determine the logical time a request was sent,
 in order to preserve a happened before order, if this order could not be
 determined, then priority is used.
\end_layout

\begin_layout Standard
We implemented a lock, that as well as incrementing its clock whenever it
 receives a 
\emph on
request
\emph default
 or an 
\emph on
ok 
\emph default
message, it also saves a clock for the requests it issues, therefore entering
 the wait state with two variables storing the clock.
 The definition of the wait function was :
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

wait(Nodes, Master, Refs, Waiting, MyId, MyClock, MyReqClock)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This extra variable would allow to always respect the happened before order,
 so that if some request messages gets really delayed, the happened before
 order will get respected before letting a process enter the critical zone
 .
\end_layout

\begin_layout Standard
A description of how this problem could happen if some request messages
 get delayed for a long time is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Lock3.Delayed-reqs-and"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename graficos/Diapositiva3.PNG

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Lock3.Delayed-reqs-and"

\end_inset

Lock3.Delayed reqs and a difficult decision
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
As we preserve the clock, where the 
\emph on
require 
\emph default
message was sent, this problem is solved by comparing the clock on a received
 request 
\emph on
(Clock)
\emph default
 to the one used when the lock sent a previous request 
\emph on
(ReqClock )
\emph default
 instead of the actual clock of the lock 
\emph on
(MyClock)
\emph default
.
 The if clause inside the wait function is:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if  				
\end_layout

\begin_layout Plain Layout

	MyReqClock > Clock ->
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	MyReqClock == Clock ->
\end_layout

\begin_layout Plain Layout

	..
\end_layout

\begin_layout Plain Layout

	..
 check priority
\end_layout

\begin_layout Plain Layout

	..
\end_layout

\begin_layout Plain Layout

	true ->
\end_layout

\begin_layout Plain Layout

	..
\end_layout

\begin_layout Plain Layout

end.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Conclusions
\end_layout

\begin_layout Standard
In this seminar it was possible to develop a program dealing with all the
 issues having access to a mutual exclusion lock has, and also to be aware
 that what could be considered a solution, sometimes has some previously
 unseen disadvantages, such as lock2 unfairness.
\end_layout

\begin_layout Standard
As a personal opinion, at first it was hard to understand the code, the
 model of the program and the relation between the locks and their messages.
 However, after some time, it was a great exercise to discuss with my classmates
 about the problems and the different solutions applicable to the different
 locks.
\end_layout

\end_body
\end_document
